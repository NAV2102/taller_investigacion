#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
import numpy as np
from functions import *
from proyecto.msg import PersonConfig
from sensor_msgs.msg import LaserScan

class Lidar(object):
    def __init__(self):
        # Crear el suscriptor al tópico del LiDAR
        #topic = 'second_robot/scan'
        topic = 'scan'
        self.pub = rospy.Subscriber(topic, LaserScan, self.callback)
        self.lid = LaserScan()
        
        # Esperar 1 segundo
        rospy.sleep(1)
        
        # Precalcular un vector que contenga los ángulos para cada rango.
        a_min = self.lid.angle_min
        a_max = self.lid.angle_max
        a_inc = self.lid.angle_increment
        self.ang = np.arange(a_min,a_max,a_inc)

        # Almacenar los rangos máximo y mínimo que puede leer el LiDAR
        self.rmin = self.lid.range_min
        self.rmax = self.lid.range_max


    def callback(self, msg):
        # Callback para el suscriptor
        self.lid = msg

        
    def get_med_ang(self):
        """ Retorna los valores de la medición y sus ángulos
            respectivos en el sistema del LiDAR
        """
        # Obtener los rangos medidos
        rangos = self.lid.ranges
        # Asignar el limite de rangos medidos
        lim_r  = 3.0
        
        ang = []; med = []
        # Mantener los rango entre 0 a 2pi radianes
        # Limitar los rangos a lim_r
        for i in range(len(rangos)//2):
            c = i + len(rangos)//2-1
            ang.append(self.ang[c])
            if rangos[c]<=lim_r:
                med.append(rangos[c])
            elif rangos[c]>lim_r:
                med.append(lim_r)

        return med,ang


# Inicializar el nodo
rospy.init_node('nodo_person_config')

# Declarar del publicador
topic = 'person_config'
pub = rospy.Publisher(topic, PersonConfig, queue_size=10)

#fpos = open("../texto/pos.dat", "w")

# Objeto que lee el escaneo
lidar = Lidar()

# Creación de una instancia (vacía) del mensaje
person_config_msg = PersonConfig()

# Asignar los valores de la medicion anterior
med_0, ang = lidar.get_med_ang()
pos_person0 = person_pos_xy(med_0, ang)

# Tiempo de ejecución del bucle (en Hz)
freq = 100
dt = 1.0/freq
rate = rospy.Rate(freq)
t = 0.0
while not rospy.is_shutdown():
    # Lectura de los valores de medidas y angulos
    med, ang = lidar.get_med_ang()
    #med = (np.array(med)[::-1]).tolist()
    lenang = len(ang)
    ang = (np.linspace(0,np.pi,lenang)).tolist()
    # Obtener la medicion filtrada
    med_f = lidar_filter(med,med_0,0.75)
    # Actualizar la medicion anterior
    med_0 = med
    
    # Obtener la posición de la persona
    pos_person = person_pos_xy(med_f, ang)
    pos_person = lidar_filter(pos_person,pos_person0,0.2)
    pos_person0 = pos_person
    
    #fpos.write(str(t)+' '+str(pos_person[0])+' '+str(pos_person[1])+'\n')
    
    # Asignar los valores en el mensaje
    person_config_msg.med        = np.round(med, 3)
    person_config_msg.med_f      = np.round(med_f, 3)
    person_config_msg.ang        = np.round(ang, 3)
    person_config_msg.pos_person = np.round(pos_person, 3)
    
    t = t + dt
    
    # Publicar el mensaje
    pub.publish(person_config_msg)
    
    #if t >= 30:
    #    break
    
    # Esperar
    rate.sleep()

#fpos.close()
