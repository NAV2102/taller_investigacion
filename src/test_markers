#!/usr/bin/env python

from __future__ import print_function
import rospy
import numpy as np
from functions import *
from markers import *

from sensor_msgs.msg import JointState
from proyecto.msg import PersonConfig
from proyecto.msg import PersonConfig2
from proyecto.msg import DistMin

pi = np.pi

class PosPerson(object):
    def __init__(self):
        topic    = 'person_config'
        self.pub = rospy.Subscriber(topic, PersonConfig2, self.callback)
        self.pperson = PersonConfig()
        
        # Esperar 1 segundo
        rospy.sleep(1)
        
    def callback(self, msg):
        self.pperson = msg
        
    def get_pperson(self):
        # Obtener la posicion de la capsula de la persona en el
        # espacio cartesiano
        pos_x = self.pperson.pos_person_x
        pos_y = self.pperson.pos_person_y
        personas = len(pos_x)
        M_position = np.empty((personas,6)) 
        for i in range(len(pos_x)):
            M_position[i] = [pos_x[i], pos_y[i], -0.9, pos_x[i], pos_y[i], 0.8]
        
        return M_position


class PosRobot(object):
    def __init__(self):
        topic    = 'joint_states'
        self.pub = rospy.Subscriber(topic, JointState, self.callback)
        self.probot = JointState()
        
        # Esperar 1 segundo
        rospy.sleep(1)
        
    def callback(self, msg):
        self.probot = msg
        
    def get_q(self):
        # Obtener la configuracion del robot
        q_rob = self.probot.position
        q = np.zeros(6)
        q[0] = q_rob[2]
        q[1] = q_rob[1]
        q[2] = q_rob[0]
        q[3] = q_rob[3]
        q[4] = q_rob[4]
        q[5] = q_rob[5]
        
        return q

class MinDist(object):
    def __init__(self):
        topic    = 'dist_min'
        self.pub = rospy.Subscriber(topic, DistMin, self.callback)
        self.dmin = DistMin()
        
        # Esperar 1 segundo
        rospy.sleep(1)
        
    def callback(self, msg):
        self.dmin = msg
        
    def get_rs(self):
        r1 = self.dmin.r1
        r2 = self.dmin.r2
      
        return r1, r2

        
if __name__ == '__main__':    
    rospy.init_node('test_markers_node')
    
    pos_person = PosPerson()
    pos_robot  = PosRobot()
    min_dist   = MinDist()
    
    o1 = BallMarker(color['GREEN'])
    o2 = BallMarker(color['GREEN'])
    o3 = BallMarker(color['GREEN'])
    o4 = BallMarker(color['GREEN'])
    o5 = BallMarker(color['GREEN'])
    o6 = BallMarker(color['GREEN'])
    
    p1 = BallMarker(color['BLUE'])
    p2 = BallMarker(color['BLUE'])
    
    mr1 = BallMarker(color['YELLOW'], scale=0.1)
    mr2 = BallMarker(color['RED'], scale=0.2)
    
    rate = rospy.Rate(100)

    while not rospy.is_shutdown():
        
        # Obtener la position en el espacio cartesiano de la 
        # persona y el robot
        M_position = pos_person.get_pperson()
        p_pos1 = M_position[0][0:3]
        p_pos2 = M_position[0][3:6]
        q = pos_robot.get_q()
        r1, r2 = min_dist.get_rs()
        
        pos = positions_robot(q)
        o1.xyz(pos[0:3,0])
        o2.xyz(pos[0:3,1])
        o3.xyz(pos[0:3,2])
        o4.xyz(pos[0:3,3])
        o5.xyz(pos[0:3,4])
        o6.xyz(pos[0:3,5])
        p1.xyz(p_pos1)
        p2.xyz(p_pos2)
        mr1.xyz(r1)
        mr2.xyz(r2)
        
        rate.sleep()
        
    
    
        

