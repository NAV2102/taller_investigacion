#!/usr/bin/env python
#

from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState

from markers import *
from functions import *


# Initialize the node
rospy.init_node("testKineControlPose")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Markers for the current and desired positions
bmarker_current  = FrameMarker()
bmarker_desired = FrameMarker(0.5)

# Joint names
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint',
          'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

# Desired pose
q_des = np.array([1.0, -1.0, 1.0, 1.3, -1.5, 1.0])
T_des = ur5_fkine(q_des)
# Find an xd that the robot can reach
quat_des = rot2quat(T_des[0:3,0:3])
xdes = TF2xyzquat(T_des)
#xd  = np.array([0.5, 0.5, 0.6, np.cos(ang/2.0), 0, 0, np.sin(ang/2.0)])
# Initial configuration
q0  = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])

# Resulting initial pose (end effector with respect to the base link)
T = ur5_fkine(q0)
x0 = TF2xyzquat(T)

# Markers for the current and the desired pose
bmarker_current.setPose(x0)
bmarker_desired.setPose(xdes)

# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0

# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)
x = copy(x0)
quat = x[3:7]
# Initialize the derror vector (derivative of the error)
derror = np.zeros(7)
# Main loop
#for i in range(1):
k = 1*np.diag([1,1,1,10,10,10,10])
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for the pose (complete here)
    
    # --------------------------------------------------
    # Calcular el error de posicion
    ep = x - xdes
    # Calcular el error de orientacion
    qe = quaternionMult(quat_des, quat)
    eo = np.array([qe[0]-1, qe[1], qe[2], qe[3]])
    # Calcular el error
    e = np.array([ep[0], ep[1], ep[2], eo[0], eo[1], eo[2], eo[3]])
    # Ley de control (derivada del error)
    de = -k.dot(e)
    # Calcular la velocidad articular
    J = jacobian_pose(q,delta=0.0001)
    Ji = np.linalg.pinv(J) # Pseudo inversa de Moore Penrose
    dq = Ji.dot(de)
    # Integracion de Euler
    q = q + dt*dq
    #q = q_lim(q)
    # Actualizar posicion
    T = ur5_fkine(q)
    x = TF2xyzquat(T)
    quat = x[3:7]
    print(e)
    if np.linalg.norm(e) < 0.0001:
        break 
    # --------------------------------------------------


    # Current configuration trnaformation to current position
    T = ur5_fkine(q)
    x = TF2xyzquat(T)
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.setPose(xdes)
    bmarker_current.setPose(x)
    # Wait for the next iteration
    rate.sleep()
