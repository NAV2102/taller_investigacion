#!/usr/bin/env python


import time
import roslib; roslib.load_manifest('ur_driver')
import rospy
import actionlib
import numpy as np
from functions import *
from markers import *
from roslib import packages

from sensor_msgs.msg import JointState
from proyecto.msg import PersonConfig2
from proyecto.msg import DistMin
from proyecto.msg import APFM
from control_msgs.msg import *
from trajectory_msgs.msg import *

import rbdl
pi = np.pi

#----------------------------------------------
# Definir las clases de los suscriptores
#----------------------------------------------

class MinDist(object):
    def __init__(self):
        topic    = 'dist_min'
        self.sus = rospy.Subscriber(topic, DistMin, self.callback)
        self.dmin = DistMin()
        
        # Esperar 1 segundo
        rospy.sleep(1)
        
    def callback(self, msg):
        self.dmin = msg
        
    def get_rs(self):
        d_min = self.dmin.min_dist
        r1 = self.dmin.r1
        r2 = self.dmin.r2
        cp = self.dmin.p
        d_min = np.array(d_min)[0]
        r1 = np.array(r1)
        r2 = np.array(r2)
        cp = np.array(cp)[0]
        #print(r1, r2)
        
        return d_min, r1, r2, cp

        
if __name__ == '__main__':    
    #----------------------------------------------
    # Configuraciones iniciales
    #----------------------------------------------
    
    # Inicializar el nodo
    rospy.init_node('test_apfm_smc_node')
      
    # Crear los suscriptores
    #pos_person = PosPerson()
    #pos_robot  = PosRobot()
    mini_dist  = MinDist()
    
    # Declarar del publicador
    topic = 'person_config'
    pub = rospy.Publisher(topic, PersonConfig2, queue_size=10)
    
    # Creación de una instancia (vacía) del mensaje
    person_config_msg = PersonConfig2()
    
    # Crear marcadores para RVIZ
    ball_des = BallMarker(color['GREEN'])
    ball_act = BallMarker(color['BLUE'])
    mr1 = BallMarker(color['YELLOW'], scale=0.1)
    mr2 = BallMarker(color['RED'], scale=0.1)
    mr2_1 = BallMarker(color['BLUE'])
    mr2_2 = BallMarker(color['BLUE'])
    
    # Archivos donde se guardaran los datos
    fdatos = open("/home/nicolas/catkin_ws/src/proyecto/texto/datos.dat", "w")
    fu = open("/home/nicolas/catkin_ws/src/proyecto/texto/u.dat", "w")
    
    # Modelo RBDL
    modelo = rbdl.loadModel('/home/nicolas/catkin_ws/src/proyecto/urdf/ur5_robot.urdf')
    ndof   = modelo.q_size     # Grados de libertad
    
    # Conectar con el robot
    robot_client = actionlib.SimpleActionClient('/arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)

    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")
    
    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names
    
    # Mover el robot a una posicion inicial    
    q_des = np.array([-pi/2, -0.5, 0.8, -2.2, -1.6, 0.0])
    dq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    ddq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    xdes = ur5_fkine(q_des)[0:3,3] 
    g.trajectory.points = [ JointTrajectoryPoint(positions=q_des, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(2)
    
    # Parametros de control APFM
    d_cr = 0.05
    d_act = 0.1
    d1  = (d_cr+d_act)/2
    cv = 0.0
    k1  = 2
    k2  = 0.05
    l1  = d_cr + 0.03
    l2  = d_act - 0.03
    Kp  = 15*np.diag([1, 1, 1])
    Ki  = 0.5*np.diag([1, 1, 1])
    I0 = np.array([0, 0, 0])
    e0 = np.array([0, 0, 0])
    Id = 0.7*np.eye(3)
    # Se definen las ganancias del controlador
    n     = 1*np.array([25.0, 50.0, 20.0, 10.0, 14.5, 3.0])
    lamb  = 10*np.diag([1.0, 1.0, 1, 1, 1, 1.0])
    alpha = 0.2
    u     = np.zeros(ndof)          # Reemplazar por la ley de control
    b     = np.zeros(ndof)          # Para el vector de efectos no lineales
    H     = np.zeros([ndof, ndof])  # Para la matriz de inercia
    H0    = np.zeros([ndof, ndof])
    
    # Parametros para el cambio de control
    t_s = 4
    t_0 = 0
    estado = 0
    temp_esp = 0
    
    # Tiempo de ejecucion
    freq = 500
    dt = 1.0/freq
    rate = rospy.Rate(freq)
    t = 0
    
    # Simulador dinamico del robot
    robot = Robot(np.array(q_des),np.array([0.0]*6),np.array([0.0]*6),ndof,dt)
    q  = robot.read_joint_positions()
    rbdl.CompositeRigidBodyAlgorithm(modelo,q,H0)
    
    fdatos.write("Tiempo"+' '+"PosX"+' '+"PosY"+' '+"PosZ"+' '+ "DesX"+' '+"DesY"+' '+"DesZ"+' '+"Dmin"+' '+"Dcr"+'\n')
    
    r1_0 = 0
    r2_0 = 0
    vrel = 0
    vrep1 = 0.0
    vrep2 = 0.0
    vatt = np.array([0, 0, 0])
    
    mov_x = 1.0*np.cos(np.pi*t/t_s)
    mov_y = 1.0
    pos_person_x = np.array([mov_x])
    pos_person_y = np.array([mov_y])
    
    person_config_msg.pos_person_x = pos_person_x
    person_config_msg.pos_person_y = pos_person_y
    pub.publish(person_config_msg)
    
    while not rospy.is_shutdown():
        
        robot_client.cancel_goal()
   
        # Leer los valores de los suscriptores
        dmin, r1, r2, cp = mini_dist.get_rs()
        
        q_des = np.array([-pi/2, -0.5, 0.8, -2.2, -1.6, 0.0])
        dq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        ddq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        
        q  = robot.read_joint_positions()
        dq = robot.read_joint_velocities()

        # No se realizará acción si no se recibe uno de
        # los mensajes
            
        x = ur5_fkine(q)[0:3,3]
        Je = jacobian(q,6)
        dx = Je.dot(dq)

        # Actualizar marcadores
        ball_des.xyz(xdes)
        ball_act.xyz(x)
        mr1.xyz(r1)
        mr2.xyz(r2)
        mr2_1.xyz(np.array([r2[0],r2[1],-0.9]))
        mr2_2.xyz(np.array([r2[0],r2[1],1.3]))
        
        # Cambio de estados
        if estado == 0 and dmin-d_cr <= d_act: 
            estado = 1
            t_0 = t
        elif estado == 1 and dmin-d_cr > d_act: 
            temp_esp = temp_esp + dt
            if temp_esp >= 0.2:
                estado = 0
                temp_esp = 0
        else: estado = estado         
            
        # Control APFM
        if estado == 1:                
                
            JeT = np.transpose(Je)
            Jcp = jacobian(q,int(cp))
            JcpT = np.transpose(Jcp)
            
            # Calculo de los vectores de repulsion            
            s = (r1 - r2)/np.linalg.norm(r1-r2)
            dr1 = (r1-r1_0)/dt
            r1_0 = r1
            dr2 = (r2-r2_0)/dt
            r2_0 = r2
            vrel = np.linalg.norm(dr2) - np.linalg.norm(dr1)
            #print(vrel)
            if dmin <= l1: c = 1
            elif dmin >= l2: c = 0
            else: c = 0.5 + 0.5*np.cos(pi*(dmin-l1)/(l2-l1)) 
            if vrel < 0:
                d0 = d1 - cv*vrel
                vrep2 = -c*k2*vrel
            else:
                d0 = d1
                vrep2 = 0
                
            if dmin - d_cr < d0: 
                vrep1 = k1*(d0/(dmin-d_cr)-1)
                if vrep1 >= 10: vrep1 = 10
                if vrep1 <= 0: vrep1 = 0
                if dmin <= d_cr: vrep1 = 10
            else: 
                vrep1 = 0
            vrep = vrep1 + vrep2
            gama = 1-np.exp(-(t-t_0)/0.6)
            vrep = gama*vrep
            if vrep>=10: vrep = 10
            Vrep = vrep*s
       
            # Calculo de los vectores de atraccion            
            e = x - xdes
            P = -Kp.dot(e)
            if dmin - d_cr > d0: I = I0 - Ki.dot(e0 + dt*e)
            else: I = I0
            I0 = I
            e0 = e
            if dmin >= d_cr:
                beta = 2/(1+np.exp(-np.power((dmin-d_cr)/d0,2))) - 1
            else:
                beta = 0
            vatt = beta*(P+I)
            vatt = np.clip(vatt,0,10)
            #vatt = (P+I)
                
            # Calculo de las velocidades articulares
            dqrep = JcpT.dot(np.linalg.inv(Jcp.dot(JcpT)+Id)).dot(Vrep)
            dqatt = JeT.dot(np.linalg.inv(Je.dot(JeT)+Id)).dot(vatt)
            dqtotal = dqatt + dqrep
            q_const = np.diag([dt, dt*3, dt*2, dt*1, dt*1, dt*1])
            qtotal = q + q_const.dot(dqtotal)
            #qtotal = q_lim(qtotal)             
                
            q_mov = qtotal
            dq_mov = dqtotal
            ddq_mov = np.array([0.0]*6)             
            
            # Control del robot
        else:
              
            q_mov = q_des
            dq_mov = dq_des
            ddq_mov = ddq_des
        
        q_des = q_mov
        dq_des = dq_mov
        ddq_des = ddq_mov
        
        # Calcular el error
        e  =  q - q_des
        de = dq - dq_des
        
        # Superficie de control
        s = de + lamb.dot(e)
        
        rbdl.CompositeRigidBodyAlgorithm(modelo,q,H)
        rbdl.NonlinearEffects(modelo,q,dq,b)
        
        dH = (H-H0)/dt
        H0 = H
        
        k = n + np.absolute(alpha*H.dot(-lamb.dot(de)) + alpha*b + (1-alpha)*dH.dot(dq_des-lamb.dot(e)))
        
        u = b + H.dot(ddq_des) - H.dot(lamb).dot(de) - np.multiply(k,np.tanh(s))
        u[0:3] = np.clip(u[0:3],-150,150)
        u[3:6] = np.clip(u[3:6],-50,50)
        
        # Simulacion del robot
        robot.send_command(u)
        
        # Leer valores del simulador
        q  = robot.read_joint_positions()
        dq = robot.read_joint_velocities()
        
        # Mover el robot
        g.trajectory.points = [ JointTrajectoryPoint(positions=q, velocities=dq, time_from_start=rospy.Duration(dt))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        # Escribir datos en los archivos
        fdatos.write(str(t)+' '+str(x[0])+' '+str(x[1])+' '+str(x[2])+' '+str(xdes[0])+' '+str(xdes[1])+' '+str(xdes[2])+' '+str(dmin)+' '+str(d_cr)+'\n')
        fu.write(str(t)+' '+str(u[0])+' '+str(u[1])+' '+str(u[2])+' '+str(u[3])+' '+str(u[4])+' '+str(u[5])+'\n')
                
        # Terminar el bucle en un tiempo de simulacion
        t = t+dt
        noise = np.random.normal(0,0.005)
        mov_x = 1.0*np.cos(np.pi*t/t_s)+noise
        mov_y = 1.0+noise
        pos_person_x = np.array([mov_x])
        pos_person_y = np.array([mov_y])
    
        person_config_msg.pos_person_x = pos_person_x
        person_config_msg.pos_person_y = pos_person_y
        pub.publish(person_config_msg)
        
        if t >= t_s:
            break
        rate.sleep()
    
    robot_client.cancel_goal()
    fdatos.close()
    fu.close()

    
    
        

